"""MODELS AUTHS"""

from django.core.exceptions import ValidationError
from django.db import models
from django.db.models.query import QuerySet
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager

from bank.models import BankAccount

# class BaseUserManager(models.Manager):
#     @classmethod
#     def normalize_number(phone_number):
#         normalized_number = '+7'+''.join(filter(str.isdigit, phone_number))
#         if len(normalized_number) > 11 or len(normalized_number) < 11:
#             raise ValidationError('неверный формат номера')
#         else:
#             return normalized_number


class MyUserManager(BaseUserManager):
    """ClientManager."""

    @classmethod
    def normalize_number(phone_number):
        normalized_number = '7'+''.join(filter(str.isdigit, phone_number))
        if len(normalized_number) != 10:
            raise ValidationError('неверный формат номера')
        else:
            return normalized_number

    def create_user(self, number: str, password: str) -> 'MyUser':

        if not number:
            raise ValidationError('Number required')

        custom_user: 'MyUser' = self.model(
            number=self.normalize_number(number),
            password=password
        )
        custom_user.set_password(password)
        custom_user.save(using=self._db)
        return custom_user

    def create_superuser(self, number: str, password: str) -> 'MyUser':

        custom_user: 'MyUser' = self.model(
            number=self.normalize_number(number),
            password=password
        )
        custom_user.is_superuser = True
        custom_user.is_active = True
        custom_user.is_staff = True
        custom_user.set_password(password)
        custom_user.save(using=self._db)
        return


class MyUser(AbstractBaseUser, PermissionsMixin):

    # class Currencies(models.TextChoices):
    #     TENGE = 'KZT', 'Tenge'
    #     RUBLI = 'RUB', 'Rubli'
    #     EURO = 'EUR', 'Euro'
    #     DOLLAR = 'USD', 'Dollar'



    number = models.IntegerField(
        verbose_name='номер телефона',
        unique=True,
        max_length=10
    )
    fio = models.CharField(
        verbose_name='ФИО',
        max_length=120
    )
    # currency = models.CharField(
    #     verbose_name='валюта',
    #     max_length=4,
    #     choices=Currencies.choices,
    #     default=Currencies.TENGE
    # )
    
    is_staff = models.BooleanField(
        default=False
    )
    objects = MyUserManager()

    # @property
    # def balance(self) -> float:
    #     transactions: QuerySet[Transaction] = \
    #         Transaction.objects.filter(user=self.pk)
    #     result: float = 0
    #     for trans in transactions:
    #         if trans.is_filled:
    #             result += trans.amout
    #         else:
    #             result -= trans.amout
    #     return result


# проверить / доработать - что это? и зачем
    REQUIRED_FIELDS = []
    USERNAME_FIELD = 'email'

    class Meta:
        ordering = ['-id']
        verbose_name = 'Пользователь'
        verbose_name_plural = 'Пользователи'

# ToDo: 
class Transaction(models.Model):

    class type_transaction(models.TextChoices):  # тип транзакции / доработать
        PLUS = 'пополнение'
        MINUS = 'списание'

    user = models.ForeignKey(
        verbose_name='пользователь',
        related_name='transaction',
        to=MyUser,
        on_delete=models.PROTECT
    )

# проверить / доработать
    account = models.ForeignKey(       
        verbose_name='счет',
        related_name='transaction',
        to=BankAccount,          # проверить / доработать
        on_delete=models.CASCADE
    )

    amout = models.DecimalField(
        verbose_name='сумма',
        max_digits=11,
        decimal_places=2
    )
    datetime_created = models.DateTimeField(
        verbose_name='дата транзакции',
        auto_now_add=True,
    )
    type = models.CharField(
        verbose_name='тип транзакции',
        default=type_transaction.MINUS   # тип транзакции / доработать
    )

    class Meta:
        ordering = ('-datetime_created',)
        verbose_name = 'Транзакция'
        verbose_name_plural = 'Транзакции'
